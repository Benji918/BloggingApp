@model IEnumerable<BloggingApp.Models.BlogModel>;
@using BloggingApp.Constants;

<div class="container mt-5">
    <h1 class="text-center mb-4">Blogs</h1>

    @if (!string.IsNullOrEmpty(TempData["Message"] as string))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <strong>@TempData["Message"]</strong>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row g-4">
        @foreach (var blog in Model)
        {
            <div class="col-md-4" id="blog-posting-@blog.Id">
                <div class="card shadow-sm h-100">
                    <img src="@Url.Content(blog.ImageUrl)" class="card-img-top" alt="@blog.Title" style="max-height: 200px; object-fit: cover;">
                    <div class="card-body">
                        <h5 class="card-title">@blog.Title</h5>
                        <p class="card-text text-truncate" style="max-height: 60px; overflow: hidden;">@blog.Description</p>
                        <p class="text-muted small">By: @string.Join(", ", blog.Author) • @blog.CreatedDate.ToShortDateString()</p>
                        <div class="d-flex justify-content-between">
                            <a asp-controller="Blog" asp-action="GetBlogById" asp-route-id="@blog.Id" class="btn btn-primary btn-sm">Edit</a>

                            <a asp-route-blogId="@blog.Id" asp-action="Create" asp-controller="Comment"><button class="btn btn-outline-success btn-sm">Add Comment</button></a>

            
							@if (User.IsInRole(Role.AUTHOR) || User.IsInRole(Role.ADMIN))
							{
								<button class="btn btn-danger btn-sm" onclick="confirmDelete(@blog.Id, '@blog.Title')">Delete</button>
							}

                            
                           
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete the blog post titled <b><span id="blogTitle"></span></b>?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
            </div>
        </div>
    </div>
</div>





@section Scripts {
    <script>
        // Function to open the modal and set the blog details
        function confirmDelete(blogId, blogTitle) {
            document.getElementById('blogTitle').textContent = blogTitle;
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');

            // Remove previous event listeners to avoid duplication
            confirmDeleteBtn.replaceWith(confirmDeleteBtn.cloneNode(true));

            // Attach a new click event listener for deletion
            document.getElementById('confirmDeleteBtn').addEventListener('click', function () {
                deleteBlog(blogId);
            });

            // Show the modal
            var deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
            deleteModal.show();
        }

        // Function to send AJAX request to delete the blog
        function deleteBlog(blogId) {
            fetch(`/Blog/Delete/${blogId}`, {
                method: 'DELETE',

            })
            .then(response => {
                if (response.ok) {
                    // Remove the deleted blog from the DOM
                    document.getElementById(`blog-posting-${blogId}`).remove();

                    // Close the modal
                    var deleteModal = bootstrap.Modal.getInstance(document.getElementById('deleteModal'));
                    deleteModal.hide();

                } else {
                    alert('Failed to delete the blog. Please try again.');
                }
            })
            .catch(error => console.error('Error:', error));
        }

        // Function to open the Add Comment modal and set the blog ID
        function showAddCommentModal(blogId) {
            // Set the blog ID in the hidden input field
            document.getElementById('blogId').value = blogId;

            // Show the modal
            var addCommentModal = new bootstrap.Offcanvas(document.getElementById('addCommentModal'));
            addCommentModal.show();
        }

         // Function to load comments for a specific blog
        function loadComments(blogId) {
            fetch(`/Comment/GetCommentsByBlogId/${blogId}`)
                .then(response => response.json())
                .then(comments => {
                    const commentsList = document.getElementById('commentsList');
                    commentsList.innerHTML = ''; // Clear previous comments

                    if (comments.length > 0) {
                        const ul = document.createElement('ul');
                        comments.forEach(comment => {
                            const li = document.createElement('li');
                            li.textContent = comment.text;
                            ul.appendChild(li);
                        });
                        commentsList.appendChild(ul);
                    } else {
                        commentsList.innerHTML = '<p>No comments yet.</p>';
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        // Handle comment form submission
        document.getElementById('commentForm').addEventListener('submit', function (e) {
            e.preventDefault(); // Prevent form submission
            const blogId = document.getElementById('blogId').value;
            const commentText = document.getElementById('commentText').value;
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

             // Create the comment object
            const comment = {
                Comment: commentText,
                BlogId: parseInt(blogId), // Ensure BlogId is an integer
                CreatedDate: new Date().toISOString(),
                UpdatedDate: new Date().toISOString(),
            };
            // Send the comment via AJAX
            fetch(`/Comment/Create/${blogId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token,
                },
                body: JSON.stringify({ commentText }),
            })
            .then(response => {
                
                if (response.ok) {
                    alert('Comment added successfully!');
                    // Reset the form and close the modal
                    document.getElementById('commentForm').reset();
                    var addCommentModal = bootstrap.Offcanvas.getInstance(document.getElementById('addCommentModal'));
                    addCommentModal.hide();
                } else {
                       // Parse the error response as JSON
                        response.json().then(data => {
                            alert(`Failed to add comment: ${data.message || 'Unknown error'}`);
                        });
                }
            })
            .catch(error => console.error('Error:', error));
        });
    </script>
}
